// Code generated by protoc-gen-go. DO NOT EDIT.
// source: parser.proto

package parser

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ParseRequest struct {
	// The pages to parse into paragraphs.
	Pages                []string `protobuf:"bytes,1,rep,name=pages,proto3" json:"pages,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ParseRequest) Reset()         { *m = ParseRequest{} }
func (m *ParseRequest) String() string { return proto.CompactTextString(m) }
func (*ParseRequest) ProtoMessage()    {}
func (*ParseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_128ea0fcf29414eb, []int{0}
}

func (m *ParseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ParseRequest.Unmarshal(m, b)
}
func (m *ParseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ParseRequest.Marshal(b, m, deterministic)
}
func (m *ParseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParseRequest.Merge(m, src)
}
func (m *ParseRequest) XXX_Size() int {
	return xxx_messageInfo_ParseRequest.Size(m)
}
func (m *ParseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ParseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ParseRequest proto.InternalMessageInfo

func (m *ParseRequest) GetPages() []string {
	if m != nil {
		return m.Pages
	}
	return nil
}

type ParseReply struct {
	// The list of important paragraphs from parsing all of the pages.
	Paragraphs           []string `protobuf:"bytes,1,rep,name=paragraphs,proto3" json:"paragraphs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ParseReply) Reset()         { *m = ParseReply{} }
func (m *ParseReply) String() string { return proto.CompactTextString(m) }
func (*ParseReply) ProtoMessage()    {}
func (*ParseReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_128ea0fcf29414eb, []int{1}
}

func (m *ParseReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ParseReply.Unmarshal(m, b)
}
func (m *ParseReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ParseReply.Marshal(b, m, deterministic)
}
func (m *ParseReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParseReply.Merge(m, src)
}
func (m *ParseReply) XXX_Size() int {
	return xxx_messageInfo_ParseReply.Size(m)
}
func (m *ParseReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ParseReply.DiscardUnknown(m)
}

var xxx_messageInfo_ParseReply proto.InternalMessageInfo

func (m *ParseReply) GetParagraphs() []string {
	if m != nil {
		return m.Paragraphs
	}
	return nil
}

func init() {
	proto.RegisterType((*ParseRequest)(nil), "ParseRequest")
	proto.RegisterType((*ParseReply)(nil), "ParseReply")
}

func init() { proto.RegisterFile("parser.proto", fileDescriptor_128ea0fcf29414eb) }

var fileDescriptor_128ea0fcf29414eb = []byte{
	// 127 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x48, 0x2c, 0x2a,
	0x4e, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x52, 0xe1, 0xe2, 0x09, 0x00, 0xf1, 0x83,
	0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x44, 0xb8, 0x58, 0x0b, 0x12, 0xd3, 0x53, 0x8b, 0x25,
	0x18, 0x15, 0x98, 0x35, 0x38, 0x83, 0x20, 0x1c, 0x25, 0x1d, 0x2e, 0x2e, 0xa8, 0xaa, 0x82, 0x9c,
	0x4a, 0x21, 0x39, 0x2e, 0xae, 0x82, 0xc4, 0xa2, 0xc4, 0xf4, 0xa2, 0xc4, 0x82, 0x0c, 0x98, 0x42,
	0x24, 0x11, 0x23, 0x7d, 0x2e, 0x36, 0xb0, 0xea, 0x22, 0x21, 0x55, 0x90, 0x69, 0x45, 0xc5, 0xa9,
	0x42, 0xbc, 0x7a, 0xc8, 0xb6, 0x48, 0x71, 0xeb, 0x21, 0x8c, 0x53, 0x62, 0x48, 0x62, 0x03, 0xbb,
	0xc5, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xa4, 0xc1, 0xc3, 0xf9, 0x9b, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ParserClient is the client API for Parser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ParserClient interface {
	// Parse several pages and return the important paragraphs.
	Parse(ctx context.Context, in *ParseRequest, opts ...grpc.CallOption) (*ParseReply, error)
}

type parserClient struct {
	cc *grpc.ClientConn
}

func NewParserClient(cc *grpc.ClientConn) ParserClient {
	return &parserClient{cc}
}

func (c *parserClient) Parse(ctx context.Context, in *ParseRequest, opts ...grpc.CallOption) (*ParseReply, error) {
	out := new(ParseReply)
	err := c.cc.Invoke(ctx, "/Parser/parse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ParserServer is the server API for Parser service.
type ParserServer interface {
	// Parse several pages and return the important paragraphs.
	Parse(context.Context, *ParseRequest) (*ParseReply, error)
}

func RegisterParserServer(s *grpc.Server, srv ParserServer) {
	s.RegisterService(&_Parser_serviceDesc, srv)
}

func _Parser_Parse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParserServer).Parse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Parser/Parse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParserServer).Parse(ctx, req.(*ParseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Parser_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Parser",
	HandlerType: (*ParserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "parse",
			Handler:    _Parser_Parse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "parser.proto",
}
