// Code generated by protoc-gen-go. DO NOT EDIT.
// source: parser.proto

package parser

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ParseRequest struct {
	Pages                string   `protobuf:"bytes,1,opt,name=pages,proto3" json:"pages,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ParseRequest) Reset()         { *m = ParseRequest{} }
func (m *ParseRequest) String() string { return proto.CompactTextString(m) }
func (*ParseRequest) ProtoMessage()    {}
func (*ParseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_128ea0fcf29414eb, []int{0}
}

func (m *ParseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ParseRequest.Unmarshal(m, b)
}
func (m *ParseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ParseRequest.Marshal(b, m, deterministic)
}
func (m *ParseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParseRequest.Merge(m, src)
}
func (m *ParseRequest) XXX_Size() int {
	return xxx_messageInfo_ParseRequest.Size(m)
}
func (m *ParseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ParseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ParseRequest proto.InternalMessageInfo

func (m *ParseRequest) GetPages() string {
	if m != nil {
		return m.Pages
	}
	return ""
}

type ParseReply struct {
	Text                 string   `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ParseReply) Reset()         { *m = ParseReply{} }
func (m *ParseReply) String() string { return proto.CompactTextString(m) }
func (*ParseReply) ProtoMessage()    {}
func (*ParseReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_128ea0fcf29414eb, []int{1}
}

func (m *ParseReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ParseReply.Unmarshal(m, b)
}
func (m *ParseReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ParseReply.Marshal(b, m, deterministic)
}
func (m *ParseReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParseReply.Merge(m, src)
}
func (m *ParseReply) XXX_Size() int {
	return xxx_messageInfo_ParseReply.Size(m)
}
func (m *ParseReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ParseReply.DiscardUnknown(m)
}

var xxx_messageInfo_ParseReply proto.InternalMessageInfo

func (m *ParseReply) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func init() {
	proto.RegisterType((*ParseRequest)(nil), "ParseRequest")
	proto.RegisterType((*ParseReply)(nil), "ParseReply")
}

func init() { proto.RegisterFile("parser.proto", fileDescriptor_128ea0fcf29414eb) }

var fileDescriptor_128ea0fcf29414eb = []byte{
	// 134 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x48, 0x2c, 0x2a,
	0x4e, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x52, 0xe1, 0xe2, 0x09, 0x00, 0xf1, 0x83,
	0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x44, 0xb8, 0x58, 0x0b, 0x12, 0xd3, 0x53, 0x8b, 0x25,
	0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x20, 0x1c, 0x25, 0x05, 0x2e, 0x2e, 0xa8, 0xaa, 0x82, 0x9c,
	0x4a, 0x21, 0x21, 0x2e, 0x96, 0x92, 0xd4, 0x8a, 0x12, 0xa8, 0x12, 0x30, 0xdb, 0xc8, 0x86, 0x8b,
	0xdf, 0x27, 0x35, 0x37, 0x33, 0x27, 0x27, 0x33, 0x3f, 0x0f, 0xac, 0xb4, 0x48, 0x48, 0x93, 0x8b,
	0x13, 0x6c, 0x95, 0x4b, 0x62, 0x49, 0xa2, 0x10, 0xaf, 0x1e, 0xb2, 0x35, 0x52, 0xdc, 0x7a, 0x08,
	0xf3, 0x94, 0x18, 0x92, 0xd8, 0xc0, 0x8e, 0x31, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x5e, 0x95,
	0x14, 0x63, 0x9c, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LemillionParserClient is the client API for LemillionParser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LemillionParserClient interface {
	ParseData(ctx context.Context, in *ParseRequest, opts ...grpc.CallOption) (*ParseReply, error)
}

type lemillionParserClient struct {
	cc *grpc.ClientConn
}

func NewLemillionParserClient(cc *grpc.ClientConn) LemillionParserClient {
	return &lemillionParserClient{cc}
}

func (c *lemillionParserClient) ParseData(ctx context.Context, in *ParseRequest, opts ...grpc.CallOption) (*ParseReply, error) {
	out := new(ParseReply)
	err := c.cc.Invoke(ctx, "/LemillionParser/parseData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LemillionParserServer is the server API for LemillionParser service.
type LemillionParserServer interface {
	ParseData(context.Context, *ParseRequest) (*ParseReply, error)
}

func RegisterLemillionParserServer(s *grpc.Server, srv LemillionParserServer) {
	s.RegisterService(&_LemillionParser_serviceDesc, srv)
}

func _LemillionParser_ParseData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LemillionParserServer).ParseData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LemillionParser/ParseData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LemillionParserServer).ParseData(ctx, req.(*ParseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LemillionParser_serviceDesc = grpc.ServiceDesc{
	ServiceName: "LemillionParser",
	HandlerType: (*LemillionParserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "parseData",
			Handler:    _LemillionParser_ParseData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "parser.proto",
}
